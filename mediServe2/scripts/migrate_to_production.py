#!/usr/bin/env python3
"""
Script pour pr√©parer la migration de WhatsApp Sandbox vers Production
Usage: python migrate_to_production.py
"""
import os
import sys
import django

script_dir = os.path.dirname(os.path.abspath(__file__))
# Aller deux niveaux plus haut pour atteindre le r√©pertoire racine du projet Django
# (Exemple: si script est dans /project_root/scripts/, cela renvoie /project_root/)
project_root = os.path.join(script_dir, '..', '') # Ajout d'un '/' final pour s'assurer que c'est un chemin de r√©pertoire
sys.path.insert(0, os.path.abspath(project_root))
# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mediServe.settings')
django.setup()

from django.conf import settings
from patients.models import Patient
from termcolor import colored

def check_production_readiness():
    """V√©rifie si le syst√®me est pr√™t pour la production"""
    print(colored("=== V√âRIFICATION PRODUCTION READINESS ===\n", 'cyan', attrs=['bold']))
    
    checks = []
    
    # 1. V√©rifier la configuration
    print(colored("1. Configuration", 'yellow'))
    
    # Mode actuel
    current_mode = getattr(settings, 'WHATSAPP_MODE', 'sandbox')
    checks.append({
        'name': 'Mode WhatsApp',
        'status': current_mode,
        'ok': True,
        'note': f"Actuellement en mode: {current_mode}"
    })
    
    # Num√©ro WhatsApp Production
    prod_number = os.getenv('TWILIO_WHATSAPP_NUMBER_PROD', '')
    checks.append({
        'name': 'Num√©ro WhatsApp Production',
        'status': 'Configur√©' if prod_number else 'Non configur√©',
        'ok': bool(prod_number),
        'note': prod_number if prod_number else 'TWILIO_WHATSAPP_NUMBER_PROD manquant dans .env'
    })
    
    # Templates
    print(colored("\n2. Templates WhatsApp", 'yellow'))
    templates = getattr(settings, 'WHATSAPP_TEMPLATES', {})
    for template_name, template_sid in templates.items():
        checks.append({
            'name': f'Template {template_name}',
            'status': 'Configur√©' if template_sid else 'Manquant',
            'ok': bool(template_sid) and template_sid != f'{template_name}_template',
            'note': template_sid if template_sid else 'Template SID requis'
        })
    
    # 3. Patients
    print(colored("\n3. Donn√©es patients", 'yellow'))
    total_patients = Patient.objects.count()
    active_patients = Patient.objects.filter(is_active=True).count()
    
    checks.append({
        'name': 'Patients totaux',
        'status': str(total_patients),
        'ok': True,
        'note': f"{active_patients} actifs"
    })
    
    # 4. V√©rifier les num√©ros de t√©l√©phone
    print(colored("\n4. Format des num√©ros", 'yellow'))
    invalid_phones = []
    for patient in Patient.objects.all():
        if not patient.phone.startswith('+'):
            invalid_phones.append(patient)
    
    checks.append({
        'name': 'Num√©ros au format E.164',
        'status': 'OK' if not invalid_phones else f'{len(invalid_phones)} invalides',
        'ok': not bool(invalid_phones),
        'note': 'Tous les num√©ros doivent commencer par +'
    })
    
    # 5. SSL/HTTPS
    print(colored("\n5. S√©curit√©", 'yellow'))
    site_url = getattr(settings, 'SITE_PUBLIC_URL', '')
    checks.append({
        'name': 'URL HTTPS',
        'status': 'OK' if site_url.startswith('https://') else 'Non s√©curis√©',
        'ok': site_url.startswith('https://'),
        'note': site_url
    })
    
    # Afficher les r√©sultats
    print(colored("\n=== R√âSUM√â ===", 'cyan', attrs=['bold']))
    all_ok = True
    
    for check in checks:
        if check['ok']:
            status = colored('‚úÖ', 'green')
        else:
            status = colored('‚ùå', 'red')
            all_ok = False
        
        print(f"{status} {check['name']}: {check['status']}")
        if check['note'] and not check['ok']:
            print(f"   ‚Üí {colored(check['note'], 'yellow')}")
    
    # Recommandations
    if all_ok:
        print(colored("\n‚úÖ Syst√®me pr√™t pour la production!", 'green', attrs=['bold']))
    else:
        print(colored("\n‚ö†Ô∏è Des corrections sont n√©cessaires avant la production", 'yellow', attrs=['bold']))
    
    return all_ok

def generate_migration_checklist():
    """G√©n√®re une checklist de migration"""
    print(colored("\n=== CHECKLIST DE MIGRATION ===", 'cyan', attrs=['bold']))
    
    checklist = """
    ‚ñ° 1. Compte Twilio
        ‚ñ° Compte v√©rifi√© avec facturation activ√©e
        ‚ñ° Solde suffisant pour les messages
        
    ‚ñ° 2. WhatsApp Business
        ‚ñ° Profil Facebook Business Manager cr√©√©
        ‚ñ° Demande WhatsApp Business soumise √† Twilio
        ‚ñ° Profil d'entreprise approuv√© par Meta
        
    ‚ñ° 3. Num√©ro de t√©l√©phone
        ‚ñ° Num√©ro d√©di√© pour WhatsApp (diff√©rent du SMS)
        ‚ñ° Num√©ro v√©rifi√© et approuv√© par Meta
        
    ‚ñ° 4. Templates de messages
        ‚ñ° Template d'activation cr√©√© et approuv√©
        ‚ñ° Template de notification document cr√©√©
        ‚ñ° Templates additionnels si n√©cessaire
        
    ‚ñ° 5. Configuration technique
        ‚ñ° Fichier .env mis √† jour avec WHATSAPP_MODE=production
        ‚ñ° Num√©ro de production configur√©
        ‚ñ° Templates SIDs ajout√©s
        ‚ñ° SSL/HTTPS configur√©
        
    ‚ñ° 6. Tests
        ‚ñ° Test d'envoi de template
        ‚ñ° Test de r√©ception de message
        ‚ñ° Test du webhook en production
        
    ‚ñ° 7. Migration des donn√©es
        ‚ñ° Backup de la base de donn√©es
        ‚ñ° Nettoyage des sessions sandbox
        ‚ñ° Information des patients actifs
    """
    
    print(checklist)
    
    # G√©n√©rer un fichier
    with open('migration_checklist.txt', 'w') as f:
        f.write(checklist)
    print(colored("\nüìÑ Checklist sauvegard√©e dans: migration_checklist.txt", 'green'))

def simulate_production():
    """Simule l'envoi de messages en mode production"""
    print(colored("\n=== SIMULATION MODE PRODUCTION ===", 'cyan', attrs=['bold']))
    
    # Prendre un patient de test
    test_patient = Patient.objects.filter(is_active=True).first()
    if not test_patient:
        print(colored("‚ùå Aucun patient actif pour le test", 'red'))
        return
    
    print(f"\nüì± Patient test: {test_patient.full_name()} ({test_patient.phone})")
    
    # Simuler l'envoi de templates
    from messaging.services import WhatsAppService
    
    # Temporairement forcer le mode production
    original_mode = settings.WHATSAPP_MODE
    settings.WHATSAPP_MODE = 'production'
    
    try:
        service = WhatsAppService()
        
        print("\n1. Test template activation:")
        print(f"   ‚Üí Template: activation")
        print(f"   ‚Üí Param√®tres: ['{test_patient.first_name}', 'https://example.com/activate/xxx']")
        print(colored("   ‚úÖ [SIMULATION] Template envoy√©", 'green'))
        
        print("\n2. Test template document:")
        print(f"   ‚Üí Template: document_ready")
        print(f"   ‚Üí Param√®tres: ['{test_patient.first_name}', 'Rapport m√©dical.pdf']")
        print(colored("   ‚úÖ [SIMULATION] Template envoy√©", 'green'))
        
    finally:
        settings.WHATSAPP_MODE = original_mode
    
    print(colored("\n‚úÖ Simulation termin√©e", 'green'))

def main():
    """Menu principal"""
    while True:
        print(colored("\n=== MIGRATION WHATSAPP SANDBOX ‚Üí PRODUCTION ===", 'cyan', attrs=['bold']))
        print("\n1. V√©rifier la production readiness")
        print("2. G√©n√©rer la checklist de migration")
        print("3. Simuler l'envoi en production")
        print("4. Guide d'activation WhatsApp Business")
        print("5. Quitter")
        
        choice = input("\nVotre choix (1-5): ")
        
        if choice == '1':
            check_production_readiness()
        elif choice == '2':
            generate_migration_checklist()
        elif choice == '3':
            simulate_production()
        elif choice == '4':
            print(colored("\nüìñ Guide complet:", 'yellow'))
            print("https://www.twilio.com/docs/whatsapp/tutorial/connect-number-business-profile")
            print("\nüìû Support Twilio WhatsApp:")
            print("https://support.twilio.com/hc/en-us/sections/360000538594-WhatsApp-on-Twilio")
        elif choice == '5':
            print(colored("\nüëã Au revoir!", 'green'))
            break
        else:
            print(colored("\n‚ùå Choix invalide", 'red'))
        
        input("\nAppuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    # Installer termcolor si n√©cessaire
    try:
        from termcolor import colored
    except ImportError:
        print("Installation de termcolor...")
        os.system(f"{sys.executable} -m pip install termcolor")
        from termcolor import colored
    
    main()
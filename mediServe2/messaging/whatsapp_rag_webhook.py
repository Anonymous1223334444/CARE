# messaging/whatsapp_rag_webhook.py
# Webhook WhatsApp avec int√©gration RAG compl√®te et logging am√©lior√©

import os
import sys
import logging
import re
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from twilio.twiml.messaging_response import MessagingResponse
from twilio.rest import Client
from django.conf import settings
from django.utils import timezone
import json

def parse_rag_output(response_text: str):
    """
    S√©pare la r√©ponse principale des suggestions g√©n√©r√©es par l'IA.
    """
    main_answer = response_text
    suggestions = []
    
    if "---SUGGESTIONS---" in response_text:
        parts = response_text.split("---SUGGESTIONS---", 1)
        main_answer = parts[0].strip()
        
        # Regex pour trouver les suggestions num√©rot√©es (ex: 1. ..., 2. ...)
        suggestion_text = parts[1]
        suggestions = re.findall(r'^\d+\.\s*(.*)', suggestion_text, re.MULTILINE)
        
    return {
        "answer": main_answer,
        "suggestions": suggestions
    }

# Ajouter le chemin pour les scripts
sys.path.append(os.path.join(settings.BASE_DIR, 'scripts'))

from patients.models import Patient
from documents.models import DocumentUpload
from sessions.models import WhatsAppSession, ConversationLog
from messaging.utils import normalize_phone_number, phones_match

QUICK_REPLY_MAP = {
    "1": "Quels sont mes prochains rendez-vous ?",
    "2": "Donne moi des conseils sant√© au vu de mes ant√©c√©dents m√©dicaux ?",
    "3": "Quels m√©dicaments dois-je prendre aujourd'hui ?",
}

logger = logging.getLogger(__name__)
@csrf_exempt
@require_POST
def whatsapp_rag_webhook(request):
    """Webhook WhatsApp avec RAG int√©gr√©"""
    import time
    start_time = time.time()
    # Logger toutes les donn√©es re√ßues pour debug
    logger.info("="*50)
    logger.info("üì± WEBHOOK TWILIO APPEL√â")
    logger.info(f"Method: {request.method}")
    logger.info(f"Headers: {dict(request.headers)}")
    logger.info(f"POST data: {dict(request.POST)}")
    logger.info(f"Body: {request.body.decode('utf-8', errors='ignore')[:500]}")  # Premiers 500 chars
    logger.info("="*50)
    
    # Cr√©er la r√©ponse TwiML vide d√®s le d√©but (pour acknowledgment)
    resp = MessagingResponse()
    
    try:
        # 1. Extraire les donn√©es du message - Twilio envoie en POST form-encoded
        # IMPORTANT: Garder le format WhatsApp complet pour les r√©ponses
        from_number = request.POST.get('From', '')  # Garde "whatsapp:+1234567890"
        to_number = request.POST.get('To', '')      # Garde "whatsapp:+1415238886"
        message_body = request.POST.get('Body', '').strip()
        logger.info(f"üì± Raw Body from Twilio: '{message_body}'")
        message_sid = request.POST.get('MessageSid', '')

        final_query = QUICK_REPLY_MAP.get(message_body, message_body)
        if final_query != message_body:
            logger.info(f"üîÑ Quick reply detected. Translated '{message_body}' to '{final_query}'")
        
        # Pour les recherches dans la DB, on nettoie le num√©ro
        clean_from_number = from_number.replace('whatsapp:', '').replace(' ', '')
        
        logger.info(f"üì± From: {from_number} (clean: {clean_from_number})")
        logger.info(f"üì± To: {to_number}")
        logger.info(f"üì± Body: {message_body}")
        logger.info(f"üì± MessageSid: {message_sid}")
        
        # Initialize Twilio client
        client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)
        
        # 3. Traiter le message d'activation
        if message_body.upper().startswith('ACTIVER '):
            logger.info("üîë Message d'activation d√©tect√©")
            response_text = handle_activation(clean_from_number, message_body)
            cleaned_response = response_text.strip()[:1024]
            
            # Send activation response with Quick Reply
            logger.info("üõ†Ô∏è Sending activation response with Quick Reply")
            try:
                client.messages.create(
                    from_=to_number,  # Utilise le "To" re√ßu (format WhatsApp complet)
                    to=from_number,   # Utilise le "From" re√ßu (format WhatsApp complet)
                    content_sid='HX14ddb3d223d516023b8432428f9ff88c',  # Your Quick Reply Content SID
                    content_variables=json.dumps({
                        'message': response_text,
                        # Ajoute d'autres variables si ton template en a besoin
                    })
                )
                logger.info("‚úÖ R√©ponse d'activation avec Quick Reply envoy√©e")
            except Exception as e:
                logger.error(f"‚ùå Erreur Quick Reply activation, fallback vers message simple: {e}")
                # Fallback vers message simple si Quick Reply √©choue
                client.messages.create(
                    from_=to_number,
                    to=from_number,
                    body=response_text
                )
                logger.info("‚úÖ R√©ponse d'activation simple envoy√©e")
            
            return HttpResponse(str(resp), content_type='text/xml')
        
        # 4. V√©rifier que le patient existe et est actif
        try:
            # Normaliser le num√©ro d'abord
            normalized_from = normalize_phone_number(clean_from_number)
            logger.info(f"üîç Recherche du patient avec num√©ro normalis√©: {normalized_from}")
            
            # Recherche flexible du patient
            patient = None
            
            # 1. Recherche exacte
            try:
                patient = Patient.objects.get(phone=normalized_from)
                logger.info(f"‚úÖ Patient trouv√© par recherche exacte")
            except Patient.DoesNotExist:
                # 2. Recherche avec comparaison flexible
                all_patients = Patient.objects.all()
                for p in all_patients:
                    if phones_match(p.phone, clean_from_number):
                        patient = p
                        logger.info(f"‚úÖ Patient trouv√© par comparaison flexible: {p.phone} ‚âà {clean_from_number}")
                        break
            
            if not patient:
                raise Patient.DoesNotExist()
            
            logger.info(f"üë§ Patient trouv√©: {patient.full_name()} (ID: {patient.id})")
            
            if not patient.is_active:
                logger.warning(f"‚ö†Ô∏è Patient non actif: {patient.id}")
                # Send inactive message with Quick Reply
                try:
                    client.messages.create(
                        from_=to_number,
                        to=from_number,
                        content_sid='HX14ddb3d223d516023b8432428f9ff88c',
                        content_variables=json.dumps({
                            'message': f"‚ùå Veuillez d'abord activer votre compte.\n\nEnvoyez : ACTIVER {patient.activation_token}"
                        })
                    )
                    logger.info("‚úÖ Message d'inactivit√© avec Quick Reply envoy√©")
                except Exception as e:
                    logger.error(f"‚ùå Erreur Quick Reply inactivit√©, fallback: {e}")
                    client.messages.create(
                        from_=to_number,
                        to=from_number,
                        body=f"‚ùå Veuillez d'abord activer votre compte.\n\nEnvoyez : ACTIVER {patient.activation_token}"
                    )
                    logger.info("‚úÖ Message d'inactivit√© simple envoy√©")
                
                return HttpResponse(str(resp), content_type='text/xml')
            
        except Patient.DoesNotExist:
            logger.error(f"‚ùå Patient non trouv√© pour le num√©ro: {clean_from_number} (normalis√©: {normalized_from})")
            
            # Logger tous les num√©ros de patients pour debug
            logger.debug("üì± Num√©ros de patients dans la DB:")
            for p in Patient.objects.all()[:10]:  # Limiter √† 10 pour les logs
                logger.debug(f"  - {p.phone} ({p.full_name()})")
            
            # Send not recognized message with Quick Reply
            try:
                client.messages.create(
                    from_=to_number,
                    to=from_number,
                    content_sid='HX14ddb3d223d516023b8432428f9ff88c',
                    content_variables=json.dumps({
                        'message': "‚ùå Num√©ro non reconnu. Veuillez contacter votre m√©decin pour vous inscrire."
                    })
                )
                logger.info("‚úÖ Message 'non reconnu' avec Quick Reply envoy√©")
            except Exception as e:
                logger.error(f"‚ùå Erreur Quick Reply 'non reconnu', fallback: {e}")
                client.messages.create(
                    from_=to_number,
                    to=from_number,
                    body="‚ùå Num√©ro non reconnu. Veuillez contacter votre m√©decin pour vous inscrire."
                )
                logger.info("‚úÖ Message 'non reconnu' simple envoy√©")
            
            return HttpResponse(str(resp), content_type='text/xml')
        
        # 5. Cr√©er ou r√©cup√©rer la session WhatsApp
        session, created = WhatsAppSession.objects.get_or_create(
            patient=patient,
            phone_number=clean_from_number,  # Utilise le num√©ro nettoy√© pour la DB
            defaults={
                'session_id': f'wa_{patient.id}_{message_sid[:8]}',
                'status': 'active'
            }
        )
        
        # Mettre √† jour la derni√®re activit√©
        session.last_activity = timezone.now()
        session.save()
        
        logger.info(f"üí¨ Session {'cr√©√©e' if created else 'r√©cup√©r√©e'}: {session.session_id}")
        
        # 6. Utiliser le RAG pour g√©n√©rer la r√©ponse
        try:
            rag_result = process_with_rag(patient, final_query, session)
        
            main_answer = rag_result.get('answer', "D√©sol√©, je n'ai pas de r√©ponse pour le moment.")
            suggestions = rag_result.get('suggestions', [])

            response_text = main_answer

            if suggestions:
                suggestion_lines = "\n".join([f"‚û°Ô∏è {s.strip()}" for s in suggestions])
                response_text += f"\n\nVous pourriez aussi demander :\n{suggestion_lines}"
                
            # 7. Enregistrer la conversation
            response_time_ms = (time.time() - start_time) * 1000
            ConversationLog.objects.create(
                session=session,
                user_message=message_body,
                ai_response=response_text,
                response_time_ms=int(response_time_ms),
                message_length=len(message_body),
                response_length=len(response_text)
            )
            
            logger.info(f"‚úÖ R√©ponse g√©n√©r√©e en {response_time_ms:.0f}ms")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur RAG pour patient {patient.id}: {e}", exc_info=True)
            response_text = (
                "üòî D√©sol√©, je n'ai pas pu traiter votre demande pour le moment.\n\n"
                "Vous pouvez:\n"
                "‚Ä¢ Reformuler votre question\n"
                "‚Ä¢ Contacter votre m√©decin directement\n"
                "‚Ä¢ R√©essayer dans quelques instants"
            )
        
        # 8. Envoyer la r√©ponse avec debugging complet
        try:
            logger.info("üõ†Ô∏è Sending RAG response with Quick Reply")
            
            # Log detailed info for debugging
            logger.info(f"üì§ Message details:")
            logger.info(f"   From: {to_number}")
            logger.info(f"   To: {from_number}")
            logger.info(f"   Content SID: HX14ddb3d223d516023b8432428f9ff88c")
            logger.info(f"   Response length: {len(response_text)} chars")
            
            # Try Quick Reply first
            message = client.messages.create(
                from_=to_number,
                to=from_number,
                content_sid='HX14ddb3d223d516023b8432428f9ff88c',
                content_variables=json.dumps({
                    'message': response_text[:1000]  # Limit to 1000 chars for templates
                })
            )
            
            # LOG THE MESSAGE SID AND STATUS
            logger.info(f"‚úÖ Message created - SID: {message.sid}")
            logger.info(f"‚úÖ Message status: {message.status}")
            logger.info(f"‚úÖ Message direction: {message.direction}")
            
            # Check message status after a moment
            import time
            time.sleep(2)  # Wait 2 seconds
            
            # Fetch updated message status
            try:
                updated_message = client.messages(message.sid).fetch()
                logger.info(f"üìä Updated message status: {updated_message.status}")
                logger.info(f"üìä Error code: {updated_message.error_code}")
                logger.info(f"üìä Error message: {updated_message.error_message}")
            except Exception as status_error:
                logger.error(f"‚ùå Couldn't fetch message status: {status_error}")
            
            logger.info("‚úÖ R√©ponse RAG avec Quick Reply envoy√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur Quick Reply RAG: {e}")
            logger.error(f"‚ùå Error details: {str(e)}")
            
            # Fallback vers message simple avec contenu nettoy√©
            try:
                logger.info("üîÑ Trying simple message fallback")
                
                # Use the same cleaned content for simple message
                fallback_message = client.messages.create(
                    from_=to_number,
                    to=from_number,
                    body=cleaned_response
                )
                
                logger.info(f"‚úÖ Fallback message - SID: {fallback_message.sid}")
                logger.info(f"‚úÖ Fallback status: {fallback_message.status}")
                
                # Check fallback status too
                time.sleep(2)
                try:
                    updated_fallback = client.messages(fallback_message.sid).fetch()
                    logger.info(f"üìä Fallback updated status: {updated_fallback.status}")
                    logger.info(f"üìä Fallback error code: {updated_fallback.error_code}")
                except Exception as fallback_status_error:
                    logger.error(f"‚ùå Couldn't fetch fallback status: {fallback_status_error}")
                
                logger.info("‚úÖ R√©ponse RAG simple envoy√©e")
                
            except Exception as e2:
                logger.error(f"‚ùå Erreur √©galement avec message simple: {e2}")
                logger.error(f"‚ùå Simple message error details: {str(e2)}")
                
                # Last fallback - use TwiML response
                resp.message("‚ö†Ô∏è Erreur technique, veuillez r√©essayer.")
                logger.info("‚ö†Ô∏è Using TwiML fallback response")
        
        return HttpResponse(str(resp), content_type='text/xml')
        
    except Exception as e:
        logger.error(f"‚ùå Erreur webhook: {e}", exc_info=True)
        resp.message("‚ö†Ô∏è Une erreur technique s'est produite. Veuillez r√©essayer.")
        return HttpResponse(str(resp), content_type='text/xml')
    
def handle_activation(from_number, message_body):
    """G√®re l'activation du patient"""
    try:
        logger.info(f"üîë Traitement activation pour {from_number}")
        
        # Extraire le token - plus flexible
        # Le token peut √™tre apr√®s "ACTIVER " ou juste le UUID
        parts = message_body.split()
        token = None
        
        # Chercher un UUID dans le message
        uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
        matches = re.findall(uuid_pattern, message_body, re.IGNORECASE)
        
        if matches:
            token = matches[0]
            logger.info(f"üîë Token extrait: {token}")
        else:
            logger.error("‚ùå Aucun token UUID trouv√© dans le message")
            return "‚ùå Format invalide. Copiez le message complet depuis votre SMS."
        
        # Rechercher le patient par token
        patient = Patient.objects.get(activation_token=token)
        logger.info(f"üë§ Patient trouv√© par token: {patient.full_name()}")
        
        # V√©rifier que le num√©ro correspond
        if not phones_match(patient.phone, from_number):
            logger.error(f"‚ùå Num√©ro non correspondant. Patient: {patient.phone}, From: {from_number}")
            return "‚ùå Ce lien d'activation ne correspond pas √† votre num√©ro."
        
        if patient.is_active:
            logger.info("‚úÖ Patient d√©j√† actif")
            return f"‚úÖ {patient.first_name}, votre compte est d√©j√† activ√© ! Comment puis-je vous aider ?"
        
        # Activer le patient
        patient.is_active = True
        patient.activated_at = timezone.now()
        patient.save()
        logger.info(f"‚úÖ Patient activ√©: {patient.id}")
        
        # V√©rifier les documents
        doc_count = DocumentUpload.objects.filter(
            patient=patient, 
            upload_status='indexed'
        ).count()
        
        return f"""‚úÖ Bienvenue {patient.first_name} !

Votre espace sant√© {settings.HEALTH_STRUCTURE_NAME} est maintenant actif.

{'üìÑ ' + str(doc_count) + ' document(s) m√©dical(aux) disponible(s)' if doc_count > 0 else 'üì≠ Aucun document pour le moment'}

Je suis votre assistant m√©dical personnel. Je peux vous aider avec :
‚Ä¢ üìã Vos documents m√©dicaux
‚Ä¢ üíä Vos traitements et posologies
‚Ä¢ üî¨ Vos r√©sultats d'examens
‚Ä¢ ‚ùì Toute question sur votre sant√©

Comment puis-je vous aider aujourd'hui ?"""
        
    except Patient.DoesNotExist:
        logger.error(f"‚ùå Patient non trouv√© pour token: {token}")
        return "‚ùå Token d'activation invalide. Veuillez v√©rifier votre SMS."
    except Exception as e:
        logger.error(f"‚ùå Erreur activation: {e}", exc_info=True)
        return "‚ùå Erreur lors de l'activation. Veuillez contacter le support."


def process_with_rag(patient, query, session):
    """Traite la question avec le syst√®me RAG en incluant l'historique de conversation."""
    try:
        logger.info(f"ü§ñ Traitement RAG pour patient {patient.id} - {patient.full_name()}")
        logger.info(f"üìù Question: {query}")

        # --- Ajout de la m√©moire de conversation ---
        history_logs = ConversationLog.objects.filter(session=session).order_by('-timestamp')[:20]
        
        conversation_history = ""
        if history_logs:
            history_list = []
            # Inverser pour avoir l'ordre chronologique
            for log in reversed(history_logs):
                history_list.append(f"Patient: {log.user_message}")
                history_list.append(f"Assistant: {log.ai_response}")
            conversation_history = "\n".join(history_list)
            logger.info(f"üß† Historique de conversation inject√©:\n{conversation_history}")

        # D√©tecter si c'est le d√©but de la conversation pour la salutation
        is_new_conversation = not history_logs.exists()
        greeting = f"üëã Bonjour {patient.first_name} ! " if is_new_conversation else ""
        # --- Fin de l'ajout de la m√©moire ---

        # V√©rifier d'abord les documents index√©s
        indexed_docs = DocumentUpload.objects.filter(
            patient=patient,
            upload_status='indexed'
        )
        logger.info(f"üìö Documents index√©s pour ce patient: {indexed_docs.count()}")
        
        # Importer les modules RAG
        from rag.your_rag_module import (
            VectorStoreHDF5, EmbeddingGenerator, 
            HybridRetriever, GeminiLLM, RAG
        )
        
        # Chemins des fichiers pour ce patient
        vector_dir = os.path.join(settings.MEDIA_ROOT, 'vectors', f'patient_{patient.id}')
        hdf5_path = os.path.join(vector_dir, 'vector_store.h5')
        bm25_dir = os.path.join(settings.MEDIA_ROOT, 'indexes', f'patient_{patient.id}_bm25')
        
        if not os.path.exists(hdf5_path):
            logger.warning(f"‚ö†Ô∏è Pas de vector store pour patient {patient.id}")
            if indexed_docs.count() > 0:
                return "‚ö†Ô∏è Vos documents sont en cours de traitement. Veuillez r√©essayer dans quelques instants."
            return fallback_response(patient, query)
        
        # Initialisation des composants RAG
        vector_store = VectorStoreHDF5(hdf5_path)
        vector_store.load_store()
        embedder = EmbeddingGenerator(settings.RAG_SETTINGS.get('EMBEDDING_MODEL', 'all-mpnet-base-v2'))
        
        if os.path.exists(bm25_dir) and settings.RAG_SETTINGS.get('USE_BM25', True):
            retriever = HybridRetriever(vector_store, embedder, bm25_dir)
            if settings.RAG_SETTINGS.get('USE_RERANKING', False):
                reranker_model = settings.RAG_SETTINGS.get('RERANKER_MODEL', 'cross-encoder/ms-marco-MiniLM-L-6-v2')
                retriever.enable_reranking(reranker_model)
        else:
            retriever = HybridRetriever(vector_store, embedder)
            
        llm = GeminiLLM(model_name=settings.RAG_SETTINGS.get('LLM_MODEL', 'gemini-1.5-flash-latest'))
        rag = RAG(retriever, llm)
        
        # Personnaliser le prompt pour WhatsApp avec m√©moire
        enhanced_query = f"""
            # CONTEXTE (informations provenant du dossier m√©dical du patient)
            - Nom: {patient.first_name} {patient.last_name}
            - Sexe: {patient.gender or 'Non sp√©cifi√©'}
            - Ant√©c√©dents: {patient.medical_history or 'Aucun'}
            - Allergies: {patient.allergies or 'Aucune'}
            - M√©dicaments: {patient.current_medications or 'Aucun'}

            # HISTORIQUE DE LA CONVERSATION
            {conversation_history}

            # NOUVELLE QUESTION DU PATIENT
            Patient: {query}

            # DIRECTIVES STRICTES POUR L'ASSISTANT M√âDICAL

            ## 1. Persona et Source des Donn√©es (Point 4)
            - Tu es un assistant m√©dical IA travaillant pour le m√©decin du patient.
            - Toutes les informations du CONTEXTE proviennent du dossier m√©dical du patient.
            - Adresse-toi au patient en utilisant des expressions comme "Dans votre dossier, je vois que..." ou "D'apr√®s les informations fournies par votre m√©decin...".
            - Ne r√©v√®le ta nature d'IA ou la source des documents que si on te le demande explicitement.
            - Tu doits te comporter comme un assistant m√©dical, pas comme un chatbot g√©n√©raliste.
            - R√©ponds en francais, en utilisant un langage simple et accessible.
            - **R√¥le sur les maladies chroniques** : Pour les conditions mentionn√©es dans le dossier (asthme, diab√®te, etc.), ton r√¥le est de :
                1. Fournir des informations g√©n√©rales et des conseils de vie (ex: alimentation, exercice) valid√©s.
                2. Expliquer les informations d√©j√† pr√©sentes dans le dossier (ex: "Votre dossier mentionne que vous suivez un traitement pour l'hypertension.").
                3. NE JAMAIS poser un nouveau diagnostic, sugg√©rer un changement de traitement ou modifier une posologie. Renvoie TOUJOURS ces questions vers le m√©decin traitant.

            ## 2. Ton, Style et Longueur (Point 3)
            - **Ton** : Adopte un ton direct, concis et informel ("casual"). Sois rassurant et efficace.
            - **Humour** : N'utilise l'humour que s'il est tr√®s pertinent et l√©ger. Dans le doute, abstiens-toi.
            - **Longueur** : Tes r√©ponses doivent √™tre br√®ves et aller droit au but. Limite-toi √† 3-4 phrases maximum, sauf si une liste √† puces est n√©cessaire pour la clart√©.
            - **Emojis** : Utilise des emojis avec parcimonie pour appuyer le message (ex: üíä, ‚úÖ, üìÖ), sans surcharger.

            ## 3. Logique de Conversation (Point 1)
            - La salutation initiale est "{greeting}". N'ajoute pas d'autre salutation.
            - Plonge directement dans le vif du sujet pour r√©pondre √† la "NOUVELLE QUESTION DU PATIENT".
            - Utilise l'historique pour comprendre le contexte et ne jamais poser une question √† laquelle la r√©ponse a d√©j√† √©t√© donn√©e.

            ## 4. Capacit√©s Proactives (Point 5)
            - **Conseils** : Si pertinent, donne des conseils de sant√© bas√©s sur le dossier m√©dical. (Ex: si le patient parle de fatigue et a des ant√©c√©dents de carence en fer, sugg√®re d'en discuter avec son m√©decin).
            - **Comportements** : Sugg√®re des habitudes saines en lien avec la question. (Ex: s'il parle de maux de t√™te, tu peux sugg√©rer de penser √† bien s'hydrater).
            - **Rappels** : Si la conversation mentionne une prise de m√©dicament ou un rendez-vous, propose CLAIREMENT de cr√©er un rappel. (Ex: "Voulez-vous que je configure un rappel pour votre prise de [m√©dicament] ?").

            ## 5. Avertissement de S√©curit√©
            - Termine TOUJOURS tes r√©ponses par un avertissement concis si un conseil est donn√©, comme : "N'oubliez pas que ceci est un conseil et ne remplace pas une consultation m√©dicale." ou "Pour toute d√©cision importante, parlez-en √† votre m√©decin.". Adapte la phrase au contexte pour qu'elle soit naturelle.

            ## 6. G√©n√©ration de Suggestions Proactives
            - Apr√®s avoir fourni ta r√©ponse principale, saute une ligne et ajoute le marqueur "---SUGGESTIONS---".
            - Sous ce marqueur, g√©n√®re TROIS questions de suivi courtes et pertinentes que le patient pourrait logiquement poser ensuite.
            - Chaque suggestion doit commencer par un num√©ro suivi d'un point (ex: "1. ...", "2. ...", "3. ...").
            - Ces suggestions doivent √™tre des questions compl√®tes et concises.

            Assistant: {greeting}"""
        
        logger.info(f"üí≠ G√©n√©ration de la r√©ponse RAG avec m√©moire")
        response = rag.answer(enhanced_query, top_k=3)

        structured_response = parse_rag_output(response)

        structured_response['answer'] = post_process_response(structured_response['answer'], patient)
        
        # response = post_process_response(response, patient)
        
        logger.info("‚úÖ R√©ponse RAG structur√©e g√©n√©r√©e avec succ√®s")
        return structured_response
        
    except Exception as e:
        logger.error(f"‚ùå Erreur RAG: {e}", exc_info=True)
        return fallback_response(patient, query)


def fallback_response(patient, query):
    """R√©ponse de secours quand le RAG √©choue"""
    query_lower = query.lower()
    
    # R√©ponses bas√©es sur des mots-cl√©s
    if any(word in query_lower for word in ['bonjour', 'salut', 'hello', 'bonsoir']):
        return f"üëã Bonjour {patient.first_name} ! Comment allez-vous aujourd'hui ?"
    
    elif any(word in query_lower for word in ['document', 'fichier', 'dossier']):
        docs = DocumentUpload.objects.filter(patient=patient, upload_status='indexed')
        if docs.exists():
            doc_list = '\n'.join([f"‚Ä¢ {doc.original_filename}" for doc in docs[:5]])
            return f"üìÑ Vos documents disponibles :\n{doc_list}\n\nQue souhaitez-vous savoir ?"
        else:
            return "üì≠ Aucun document trouv√© dans votre dossier. Contactez votre m√©decin pour les ajouter."
    
    elif any(word in query_lower for word in ['aide', 'help', 'comment', 'quoi']):
        return f"""ü§ù Je peux vous aider avec :
        
‚Ä¢ üìã Consulter vos documents m√©dicaux
‚Ä¢ üíä Informations sur vos m√©dicaments
‚Ä¢ üî¨ Comprendre vos r√©sultats d'examens
‚Ä¢ üìÖ Rappels de rendez-vous
‚Ä¢ ‚ùì R√©pondre √† vos questions de sant√©

Posez-moi votre question !"""
    
    else:
        return f"""ü§î Je n'ai pas trouv√© d'information sp√©cifique sur : \"{query}\"\n
Essayez de reformuler ou demandez par exemple :
‚Ä¢ \"Quels sont mes derniers r√©sultats ?\"
‚Ä¢ \"Quelle est ma posologie actuelle ?\"
‚Ä¢ \"R√©sume mon dernier rapport m√©dical\"

Pour une assistance urgente, contactez votre m√©decin."""


def post_process_response(response, patient):
    """Post-traite la r√©ponse du RAG pour WhatsApp"""
    # Limiter la longueur
    if len(response) > 1000:
        response = response[:997] + "..."
    
    # S'assurer que la r√©ponse n'est pas vide
    if not response or response.strip() == "":
        response = "Je n'ai pas pu g√©n√©rer une r√©ponse. Veuillez reformuler votre question."
    
    # Nettoyer toute mention de "R√©ponse g√©n√©r√©e pour..."
    response = re.sub(r'_üí° R√©ponse g√©n√©r√©e pour.*_', '', response, flags=re.IGNORECASE).strip()
    
    return response